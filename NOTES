RESEARCH NOTES - for my questions and musings
  - Refactor container initialisation
    - don't need lens on GET, which simplifies things somewhat.
  - Think about how general class will be a container.
    - Implement LensObject, which can take attributes, bit like a dict
      - See todo notes on the LensObject class
  - dist
    - Copy README.rst to README for benefit of PyPi
  - Extend LensObject idea to Implement aggregate container support within the base container.
  - Get rid of default type on List lens - too confusing and not really
    intuitive in most cases.
  - Re-organise these notes! and put feature ideas in TODO, rather than here.
  - LABEL mode
    - Now Or fixed for A | empty() case, can make source order mode more accurate by matching exact source position of gotten items.
  
  ------------- Misc ideas
  - Support some global settings
   - validate data in puts, which may be expensive
   - allow or disallow overwriting labelled items already present in relevant containers.
  - docs
    - gen html docs from various source files
    - Would be nice to generate some docs from source code examples.
  - Tests: might actually be useful to break tests up within classes.
  - Add bad tests that we know do not work and which are not run for commit.
    - Perhaps like: with problem_test(): blah
  - Currently lens will succeed if not all items in repeat put, so need to
    check for consumption, where possible - perhaps a function of container
    that can optionally be implemented
    - also need this in get
  - NewLine issue to think about.
    Since last item in list may have no newline, appended items will not be
    seprated by a newline - perhaps we can force NewLine to ouput "\n" rather
    than "" in such cases. Also, think more generally about this.
    - I should keep counter test cases.
  
  - Add profiling to test script: -m cProfile
  - Validating incoming items:
    - Do we need to differntiate beween low and high level lenses so we know if
      an item should not be passed to a lens.
    - Checking number of items PUT, say in repeat or And
  - How to handle printing debug contexts of lenses before their constructor.
  - Note that some lenses cannot take certain types, though should we just let casting errors to indicate this at runtime?
  - Look in to using something like coverage.py 
  - Need to think about USER-INTENDED (or perhaps IMPLIED) alignment:
    - Perhaps based on LABEL vs SOURCE alignment.
    - Case of using labels where value changed, loosing meta
     - perhaps if item has no meta but its label had a copy of original meta we can reinstate meta in 
       (new) item where the user would feel they are the same item.

  - Could we have type=str on container lens rather than combine chars?
  - Group should take only non-typed lens?
  - Create KeyValue lens -> wraps autolist with an is_label
  - Could have containers in container, multiplex store and consume.
  - If any kargs set on a lens, assume is a store using default type of str
  - DEV:TESTS inheritance, makes it difficult to disable tests by changing function
    name.
  - DEV: Commit hooks 
    - Would be good if hook can add prefix to commit message to show test status.
  - Optimisations
    - Concering containers:
      - Perhaps we have sidestepped this now.
      - How to know whether a given lens may modify a container or input
      - How to know efficiently if a lens has modifed a container
        - Dirty flag idea may fail with overwrites by nested lenses
        - Listened objecj sounds good, but how to account for state reset
    - Concerning Rollbackables
      - Find solution to efficient object rollback, avoiding blanket deepcopy - use aspects, perhaps?
      - I think we only need two copies when we re-use the original state, such as in Or
    - Concering meta data
      - It does not make sense for all lens items to carry their input string (e.g. AO) since they do not interleve input with created values.
    - When does a PUT first require a GET:
      - Or cross put
      - Key matching
      - None aligned input
      - ?
      - Could we improve this?
   
Development
===========

To test package:
  python2 setup.py install --user

Links
-----

http://code.activestate.com/recipes/528934-top-down-recursive-pyparsing-parsers-without-forwa/
http://www.mail-archive.com/python-list@python.org/msg17905.html
/resources/apps/augeas/augeas-git-annotated/lenses/tests/

RESEARCH NOTES
  - Think about how general class will be a container.
  - Add bad tests that we know do not work and which are not run for commit.
  - Re-organise these notes!
  
  ------------- Misc ideas
  
  - Need to think about USER-INTENDED (or perhaps IMPLIED) alignment:
    - Perhaps based on LABEL vs SOURCE alignment.
    - Case of using labels where value changed, loosing meta
     - perhaps if item has no meta but its label had a copy of original meta we can reinstate meta in 
       (new) item where the user would feel they are the same item.

  - Could we have type=str on container lens rather than combine chars?
  - Group should take only non-typed lens?
  - Create KeyValue lens -> wraps autolist with an is_label
  - Could have containers in container, multiplex store and consume.
  - If any kargs set on a lens, assume is a store using default type of str
  - DEV:TESTS inheritance, makes it difficult to disable tests by changing function
    name.
  - DEV: Commit hooks 
    - Would be good if hook can add prefix to commit message to show test status.
  - Optimisations
    - Concering containers:
      - How to know whether a given lens may modify a container or input
      - How to know efficiently if a lens has modifed a container
        - Dirty flag idea may fail with overwrites by nested lenses
        - Listened objecj sounds good, but how to account for state reset
    - Concerning Rollbackables
      - Find solution to efficient object rollback, avoiding blanket deepcopy - use aspects, perhaps?
      - I think we only need two copies when we re-use the original state, such as in Or
    - Concering meta data
      - It does not make sense for all lens items to carry their input string (e.g. AO) since they do not interleve input with created values.
    - When does a PUT first require a GET:
      - Or cross put
      - Key matching
      - None aligned input
      - ?
      - Could we improve this?
    

Links
-----

http://code.activestate.com/recipes/528934-top-down-recursive-pyparsing-parsers-without-forwa/
http://www.mail-archive.com/python-list@python.org/msg17905.html
/resources/apps/augeas/augeas-git-annotated/lenses/tests/
